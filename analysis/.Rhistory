#       parent == "Emb. Wh-Q\n(Know)" ~ frequency,
#       parent == "Res. Rel.\nClause" ~ frequency - 125,
#       TRUE ~ frequency + runif(1, -0.01, 0.01)
#     ),
#     jitter_y = case_when(
#       parent == "Topicalization" ~ mean_auc - 0.075,
#       parent == "Pseudocleft" ~ mean_auc + 0.01,
#       parent == "Emb. Wh-Q\n(Wonder)" ~ mean_auc - 0.125,
#       parent == "Emb. Wh-Q\n(Know)" ~ mean_auc -.035 ,
#       parent == "Res. Rel.\nClause" ~ mean_auc - 0.15,
#       TRUE ~ mean_auc + runif(1, -0.02, 0.02)
#     )
#   )
#
# df_avg_freq_jittered_out <- df_avg_freq %>%
#   filter(Direction == "Out-Degree") %>%
#   mutate(
#     jitter_x = case_when(
#       parent == "Topicalization" ~ frequency + 5,
#       parent == "Pseudocleft" ~ frequency + 3.5,
#       parent == "Emb. Wh-Q\n(Wonder)" ~ frequency,
#       parent == "Emb. Wh-Q\n(Know)" ~ frequency -.035,
#       parent == "Res. Rel.\nClause" ~ frequency - 125,
#       TRUE ~ frequency + runif(1, -0.01, 0.01)
#     ),
#     jitter_y = case_when(
#       parent == "Topicalization" ~ mean_auc + 0.01,
#       parent == "Pseudocleft" ~ mean_auc - 0.075,
#       parent == "Emb. Wh-Q\n(Wonder)" ~ mean_auc - 0.13,
#       parent == "Emb. Wh-Q\n(Know)" ~ mean_auc - .035 ,
#       parent == "Res. Rel.\nClause" ~ mean_auc - 0.125,
#       parent == "Matrix Wh-Q" ~ mean_auc - 0.05,
#       TRUE ~ mean_auc + runif(1, -0.02, 0.02)
#     )
#   )
df_avg_freq_jittered_in <- df_avg_freq %>%
filter(Direction == "In-Degree") %>%
mutate(
jitter_x = case_when(
parent == "Topicalization" ~ frequency + 4,
parent == "Pseudocleft" ~ frequency + 3.5,
parent == "Emb. Wh-Q\n(Wonder)" ~ frequency - 175,
parent == "Emb. Wh-Q\n(Know)" ~ frequency,
parent == "Res. Rel.\nClause" ~ frequency - 100,
TRUE ~ frequency + runif(1, -0.01, 0.01)
),
jitter_y = case_when(
parent == "Topicalization" ~ mean_auc - 0.05,
parent == "Pseudocleft" ~ mean_auc + 0.01,
parent == "Emb. Wh-Q\n(Wonder)" ~ mean_auc - 0.1,
parent == "Emb. Wh-Q\n(Know)" ~ mean_auc -.035 ,
parent == "Res. Rel.\nClause" ~ mean_auc - 0.105,
TRUE ~ mean_auc + runif(1, -0.02, 0.02)
)
)
df_avg_freq_jittered_out <- df_avg_freq %>%
filter(Direction == "Out-Degree") %>%
mutate(
jitter_x = case_when(
parent == "Topicalization" ~ frequency + 5,
parent == "Pseudocleft" ~ frequency + 3.5,
parent == "Emb. Wh-Q\n(Wonder)" ~ frequency,
parent == "Emb. Wh-Q\n(Know)" ~ frequency -.035,
parent == "Res. Rel.\nClause" ~ frequency - 200,
TRUE ~ frequency + runif(1, -0.01, 0.01)
),
jitter_y = case_when(
parent == "Topicalization" ~ mean_auc + 0.01,
parent == "Pseudocleft" ~ mean_auc - 0.075,
parent == "Emb. Wh-Q\n(Wonder)" ~ mean_auc - 0.125,
parent == "Emb. Wh-Q\n(Know)" ~ mean_auc - .035 ,
parent == "Res. Rel.\nClause" ~ mean_auc- 0.07,
parent == "Matrix Wh-Q" ~ mean_auc - 0.05,
TRUE ~ mean_auc + runif(1, -0.02, 0.02)
)
)
p_in_scatter <- ggplot(df_avg_freq_jittered_in,
aes(x = frequency, y = mean_auc)) +  # removed color here
geom_smooth(method = 'lm', se = FALSE, linetype = "dotted", color = "black") +  # dotted line
geom_point(aes(color = parent), size = 3, alpha = 0.5) +
geom_text(aes(x = jitter_x, y = jitter_y, label = parent, color = parent),
vjust = -1, size = 4, family = "Palatino", fontface = "bold")+
labs(
title = "In-Degree",
x = NULL,
y = "Mean AUC"
) +
scale_x_log10() +
ylim(0, .6) +
scale_color_manual(values = label_colors) +
base_theme +
# theme(
#   # Keep y-axis text and ticks
#   axis.text.x = element_blank(),
#   axis.ticks.x = element_blank(),
#   axis.title.x = element_blank(),
#   axis.title.y = element_blank(),
#   plot.title = element_text(size = 36, family = "Palatino", hjust = 0.5, face = "bold"),
#   legend.position = "none"
# )
theme(
axis.title.y = element_blank(),
plot.title = element_text(size = 36, family = "Palatino", hjust = 0.5, face = "bold"),
legend.position = "none"
)
p_out_scatter <- ggplot(df_avg_freq_jittered_out,
aes(x = frequency, y = mean_auc)) +
geom_smooth(method = 'lm', se = FALSE, linetype = "dotted", color = "black") +
geom_point(aes(color = parent), size = 3, alpha = 0.5) +
geom_text(aes(x = jitter_x, y = jitter_y, label = parent, color = parent),
vjust = -1, size = 4, family = "Palatino", fontface = "bold") +
labs(
title = "Out-Degree",
x = NULL,
y = NULL
) +
scale_x_log10() +
ylim(0, .6) +
scale_color_manual(values = label_colors) +
base_theme +
# theme(
#   axis.title.x = element_blank(),
#   plot.title = element_text(size = 36, family = "Palatino", hjust = 0.5, face = "bold"),
#   legend.position = "none"
# )
theme(
axis.title.y = element_blank(),
plot.title = element_text(size = 36, family = "Palatino", hjust = 0.5, face = "bold"),
legend.position = "none",
axis.ticks.y = element_blank(),
axis.text.y = element_blank()
)
common_y_title <- ggplot() +
annotate("text", x = 0, y = 0.5, label = "Mean AUC",
angle = 90, size = 12, family = "Palatino", fontface = "bold") +
theme_void()
combined_plot <- p_in_scatter + p_out_scatter +
plot_layout(ncol = 2, widths = c(1, 1), guides = "collect")
# common_y_title <- ggplot() +
#   annotate("text", x = 0, y = 0.5, label = "Mean AUC",
#            angle = 90, size = 12, family = "Palatino", fontface = "bold") +
#   theme_void()
final_plot <- (common_y_title + combined_plot) +
plot_layout(widths = c(0.05, 1)) +
plot_annotation(
caption = "Construction Frequency (Log Scale)",
theme = theme(
plot.caption = element_text(size = 30, family = "Palatino", hjust = 0.6, face = "bold", margin = margin(t = 15))
)
)
final_plot
ggsave(paste0("plots/frequency_source_sink_narrow", model_suffix,".pdf"), final_plot, device = pdf, height = 6, width = 8, dpi = 10000)
library(ggplot2)
library(dplyr)
library(readr)
library(viridis)
library(arrow)
library(extrafont)
model_size = "2.8b"
model_name = paste0("pythia-", model_size)
generalization_df <- read_parquet("../results/generalization/classic.parquet")
generalization_df <- generalization_df[generalization_df$seed == 41 &
generalization_df$model == model_name, ]
generalization_df_unique_embed <- generalization_df %>%
distinct() %>%
filter(grepl("embedded_clause", from)) %>%
filter(!to %in% c("control_lexical_animate", "control_lexical_inanimate"))
gen_df <- generalization_df_unique_embed
gen_df$to <- gsub("embedded_control_lexical_(animate|inanimate)", "embedded_control_lexical", gen_df$to)
max_odds_df <- gen_df %>%
group_by(layer, pos, from, to, model, seed, leave_out, single_double) %>%
summarize(mean_odds_ratio = mean(odds_ratio, na.rm = TRUE),
sd_avg = sd(odds_ratio, na.rm = TRUE),
median_avg = median(mean_odds_ratio, na.rm = TRUE),
n = n(), .groups = "drop")%>%
group_by(pos, from, to, model, seed, leave_out, single_double) %>%
summarize(
max_avg = max(mean_odds_ratio, na.rm = TRUE)
)
max_odds_df$animate_from <- !grepl("inanimate", max_odds_df$from)
max_odds_df$animate_to <- !grepl("inanimate", max_odds_df$to)
max_odds_df$parent_construction_from <- with(max_odds_df,
gsub("_animate", "", gsub("_inanimate", "", from))
)
max_odds_df$parent_construction_to <- with(max_odds_df,
gsub("_animate", "", gsub("_inanimate", "", to))
)
max_odds_df$parent_construction_from <- gsub("_embedded_clause", "", max_odds_df$parent_construction_from)
max_odds_df$parent_construction_to <- gsub("_embedded_clause", "", max_odds_df$parent_construction_to)
max_odds_df$animacy_condition <- with(max_odds_df, ifelse(
to == "embedded_control",
"control",
ifelse(
to == "embedded_control_lexical",
"control_lexical",
paste0(
ifelse(parent_construction_from == parent_construction_to, "SameDataset", "DiffDataset"), "_",
ifelse(animate_from == animate_to, "SameAnimacy", "DiffAnimacy")
)
)
)
)
# ========= NORMALIZED ==========
max_odds_df$normal <- NA
unique_pos <- unique(max_odds_df$pos)
unique_from <- unique(max_odds_df$from)
for (pos_i in unique_pos) {
for (from_val in unique_from) {
from_data <- max_odds_df[max_odds_df$from == from_val
& max_odds_df$pos == pos_i, ]
row_index_from <- which(from_data$to == from_val)
if(length(row_index_from) > 0) {
normal <- from_data$max_avg[row_index_from]
for (row_i in 1:nrow(from_data)) {
current_val <- from_data$max_avg[row_i]
max_odds_df$normal[max_odds_df$from == from_val
& max_odds_df$pos == pos_i
& max_odds_df$to == from_data$to[row_i]] <- current_val / normal
}
} else {
warning(paste("No row found for 'from' value:", from_val, "and 'pos' value:", pos_i))
}
}
}
from_order <- c(
"wh_question_animate",
"embedded_wh_finite_animate",
"embedded_wh_nonfinite_animate",
"restricted_rc_animate",
"cleft_animate",
"pseudo_cleft_animate",
"topicalization_animate",
"wh_question_inanimate",
"embedded_wh_finite_inanimate",
"embedded_wh_nonfinite_inanimate",
"restricted_rc_inanimate",
"cleft_inanimate",
"pseudo_cleft_inanimate",
"topicalization_inanimate"
)
to_order <- c(
"embedded_control",
"embedded_control_lexical",
"wh_question_animate",
"embedded_wh_finite_animate",
"embedded_wh_nonfinite_animate",
"restricted_rc_animate",
"cleft_animate",
"pseudo_cleft_animate",
"topicalization_animate",
"wh_question_inanimate",
"embedded_wh_finite_inanimate",
"embedded_wh_nonfinite_inanimate",
"restricted_rc_inanimate",
"cleft_inanimate",
"pseudo_cleft_inanimate",
"topicalization_inanimate"
)
max_odds_df$from <- factor(gsub("_embedded_clause", "", max_odds_df$from), levels = from_order)
max_odds_df$to <- factor(gsub("_embedded_clause", "", max_odds_df$to), levels = to_order)
pos_labels <- c(
"2" = "{filler}",
"4" = "the_1",
"5" = "{np1}",
"6" = "{verb1}",
"7" = "that",
"8" = "the_2",
"9" = "{np2}",
"10" = "{verb2}"
)
max_odds_df$pos <- factor(max_odds_df$pos, levels = c(2, 4, 5, 6, 7, 8 ,9, 10), labels = pos_labels)
write_parquet(max_odds_df, paste0("../results/generalization/embedded_clause_single_construction_classic_", model_size,".parquet"))
library(ggplot2)
library(dplyr)
library(readr)
library(viridis)
library(arrow)
library(extrafont)
model_size = "6.9b"
model_name = paste0("pythia-", model_size)
generalization_df <- read_parquet("../results/generalization/classic.parquet")
generalization_df <- generalization_df[generalization_df$seed == 41 &
generalization_df$model == model_name, ]
generalization_df_unique_embed <- generalization_df %>%
distinct() %>%
filter(grepl("embedded_clause", from)) %>%
filter(!to %in% c("control_lexical_animate", "control_lexical_inanimate"))
gen_df <- generalization_df_unique_embed
gen_df$to <- gsub("embedded_control_lexical_(animate|inanimate)", "embedded_control_lexical", gen_df$to)
max_odds_df <- gen_df %>%
group_by(layer, pos, from, to, model, seed, leave_out, single_double) %>%
summarize(mean_odds_ratio = mean(odds_ratio, na.rm = TRUE),
sd_avg = sd(odds_ratio, na.rm = TRUE),
median_avg = median(mean_odds_ratio, na.rm = TRUE),
n = n(), .groups = "drop")%>%
group_by(pos, from, to, model, seed, leave_out, single_double) %>%
summarize(
max_avg = max(mean_odds_ratio, na.rm = TRUE)
)
max_odds_df$animate_from <- !grepl("inanimate", max_odds_df$from)
max_odds_df$animate_to <- !grepl("inanimate", max_odds_df$to)
max_odds_df$parent_construction_from <- with(max_odds_df,
gsub("_animate", "", gsub("_inanimate", "", from))
)
max_odds_df$parent_construction_to <- with(max_odds_df,
gsub("_animate", "", gsub("_inanimate", "", to))
)
max_odds_df$parent_construction_from <- gsub("_embedded_clause", "", max_odds_df$parent_construction_from)
max_odds_df$parent_construction_to <- gsub("_embedded_clause", "", max_odds_df$parent_construction_to)
max_odds_df$animacy_condition <- with(max_odds_df, ifelse(
to == "embedded_control",
"control",
ifelse(
to == "embedded_control_lexical",
"control_lexical",
paste0(
ifelse(parent_construction_from == parent_construction_to, "SameDataset", "DiffDataset"), "_",
ifelse(animate_from == animate_to, "SameAnimacy", "DiffAnimacy")
)
)
)
)
# ========= NORMALIZED ==========
max_odds_df$normal <- NA
unique_pos <- unique(max_odds_df$pos)
unique_from <- unique(max_odds_df$from)
for (pos_i in unique_pos) {
for (from_val in unique_from) {
from_data <- max_odds_df[max_odds_df$from == from_val
& max_odds_df$pos == pos_i, ]
row_index_from <- which(from_data$to == from_val)
if(length(row_index_from) > 0) {
normal <- from_data$max_avg[row_index_from]
for (row_i in 1:nrow(from_data)) {
current_val <- from_data$max_avg[row_i]
max_odds_df$normal[max_odds_df$from == from_val
& max_odds_df$pos == pos_i
& max_odds_df$to == from_data$to[row_i]] <- current_val / normal
}
} else {
warning(paste("No row found for 'from' value:", from_val, "and 'pos' value:", pos_i))
}
}
}
from_order <- c(
"wh_question_animate",
"embedded_wh_finite_animate",
"embedded_wh_nonfinite_animate",
"restricted_rc_animate",
"cleft_animate",
"pseudo_cleft_animate",
"topicalization_animate",
"wh_question_inanimate",
"embedded_wh_finite_inanimate",
"embedded_wh_nonfinite_inanimate",
"restricted_rc_inanimate",
"cleft_inanimate",
"pseudo_cleft_inanimate",
"topicalization_inanimate"
)
to_order <- c(
"embedded_control",
"embedded_control_lexical",
"wh_question_animate",
"embedded_wh_finite_animate",
"embedded_wh_nonfinite_animate",
"restricted_rc_animate",
"cleft_animate",
"pseudo_cleft_animate",
"topicalization_animate",
"wh_question_inanimate",
"embedded_wh_finite_inanimate",
"embedded_wh_nonfinite_inanimate",
"restricted_rc_inanimate",
"cleft_inanimate",
"pseudo_cleft_inanimate",
"topicalization_inanimate"
)
max_odds_df$from <- factor(gsub("_embedded_clause", "", max_odds_df$from), levels = from_order)
max_odds_df$to <- factor(gsub("_embedded_clause", "", max_odds_df$to), levels = to_order)
pos_labels <- c(
"2" = "{filler}",
"4" = "the_1",
"5" = "{np1}",
"6" = "{verb1}",
"7" = "that",
"8" = "the_2",
"9" = "{np2}",
"10" = "{verb2}"
)
max_odds_df$pos <- factor(max_odds_df$pos, levels = c(2, 4, 5, 6, 7, 8 ,9, 10), labels = pos_labels)
write_parquet(max_odds_df, paste0("../results/generalization/embedded_clause_single_construction_classic_", model_size,".parquet"))
library(ggplot2)
library(dplyr)
library(readr)
library(viridis)
library(tidyr)
library(extrafont)
library(ggsignif)
library(reshape2)
library(arrow)
model_size = "2.8b"
model_name = paste0("pythia-", model_size)
generalization_df <- read_parquet("../results/generalization/classic.parquet")
generalization_df <- generalization_df[generalization_df$seed == 41 &
generalization_df$model == model_name, ]
generalization_df_unique_single <- generalization_df %>%
distinct() %>%
filter(!grepl("embedded_clause", from)) %>%
filter(!grepl("control", from)) %>%
filter(!grepl("embedded_clause", to)) %>%
filter(!to %in% c("embedded_control_lexical_animate", "embedded_control_lexical_inanimate", "embedded_control"))
gen_df <- generalization_df_unique_single
gen_df$to <- gsub("control_lexical_(animate|inanimate)", "control_lexical", gen_df$to)
max_odds_df <- gen_df %>%
group_by(layer, pos, from, to, model, seed, leave_out, single_double) %>%
summarize(mean_odds_ratio = mean(odds_ratio, na.rm = TRUE),
sd_avg = sd(odds_ratio, na.rm = TRUE),
median_avg = median(mean_odds_ratio, na.rm = TRUE),
n = n(), .groups = "drop")%>%
group_by(pos, from, to, model, seed, leave_out, single_double) %>%
summarize(
max_avg = max(mean_odds_ratio, na.rm = TRUE)
)
# Add animacy indicators
max_odds_df$animate_from <- !grepl("inanimate", max_odds_df$from)
max_odds_df$animate_to <- !grepl("inanimate", max_odds_df$to)
max_odds_df$parent_construction_from <- with(max_odds_df,
gsub("_animate", "", gsub("_inanimate", "", from))
)
max_odds_df$parent_construction_to <- with(max_odds_df,
gsub("_animate", "", gsub("_inanimate", "", to))
)
max_odds_df$animacy_condition <- with(max_odds_df, ifelse(
to == "control",
"control",
ifelse(
to == "control_lexical",
"control_lexical",
paste0(
ifelse(parent_construction_from == parent_construction_to, "SameDataset", "DiffDataset"), "_",
ifelse(animate_from == animate_to, "SameAnimacy", "DiffAnimacy")
)
)
)
)
# ========= NORMALIZED ==========
max_odds_df$normal <- NA
unique_pos <- unique(max_odds_df$pos)
unique_from <- unique(max_odds_df$from)
for (pos_i in unique_pos) {
for (from_val in unique_from) {
from_data <- max_odds_df[max_odds_df$from == from_val
& max_odds_df$pos == pos_i, ]
row_index_from <- which(from_data$to == from_val)
if(length(row_index_from) > 0) {
normal <- from_data$max_avg[row_index_from]
for (row_i in 1:nrow(from_data)) {
current_val <- from_data$max_avg[row_i]
max_odds_df$normal[max_odds_df$from == from_val
& max_odds_df$pos == pos_i
& max_odds_df$to == from_data$to[row_i]] <- current_val / normal
}
} else {
warning(paste("No row found for 'from' value:", from_val, "and 'pos' value:", pos_i))
}
}
}
from_order <- c(
"wh_question_animate",
"embedded_wh_finite_animate",
"embedded_wh_nonfinite_animate",
"restricted_rc_animate",
"cleft_animate",
"pseudo_cleft_animate",
"topicalization_animate",
"wh_question_inanimate",
"embedded_wh_finite_inanimate",
"embedded_wh_nonfinite_inanimate",
"restricted_rc_inanimate",
"cleft_inanimate",
"pseudo_cleft_inanimate",
"topicalization_inanimate"
)
to_order <- c(
"control",
"control_lexical",
"wh_question_animate",
"embedded_wh_finite_animate",
"embedded_wh_nonfinite_animate",
"restricted_rc_animate",
"cleft_animate",
"pseudo_cleft_animate",
"topicalization_animate",
"wh_question_inanimate",
"embedded_wh_finite_inanimate",
"embedded_wh_nonfinite_inanimate",
"restricted_rc_inanimate",
"cleft_inanimate",
"pseudo_cleft_inanimate",
"topicalization_inanimate"
)
max_odds_df$from <- factor(max_odds_df$from, levels = from_order)
max_odds_df$to <- factor(max_odds_df$to, levels = to_order)
pos_labels <- c(
"2" = "{filler}",
"4" = "the",
"5" = "{np}",
"6" = "{verb}"
)
max_odds_df$pos <- factor(max_odds_df$pos, levels = c(2, 4, 5, 6), labels = pos_labels)
write_parquet(max_odds_df, paste0("../results/generalization/single_clause_single_construction_classic_", model_size,".parquet"))
